# under the env learning 
import random 
import math 
import sys
import time 

import numpy as np 
import pandas as pd 
# import networkx as nx 
# from gensim.models import Word2Vec

# from sklearn_extra.cluster import KMedoids

start_time = time.time()  # 记录开始时间


instance_name = sys.argv[1]

percentage_T = 0.05  
n_iterations = 10
n_swap = 1000
k_max = 1 # to reduce the computational time, set 1, use other k_max please use c++ implement



# if instance_name == "abilene":
#     T = {99,82,80,42,21,13}

# if instance_name == "atlanta":
#     T = {6,31,87,3,8,4,150,2,120,66,57,1}

# if instance_name == "cost266":
#     T = {1261, 1101, 1249, 1067, 1034, 1025, 989, 1078, 1060, 936, 926, 923, 918, 885, 725, 875, 736, 718, 196, 89, 189, 1044, 1026, 180, 43, 208, 143, 717, 712, 135, 886, 99, 887, 60, 75, 80, 879, 1033, 79, 1339, 3, 15, 880, 925, 76, 716, 898, 888, 71, 188, 33, 1314, 1100, 81, 1098, 0, 4, 1111, 32, 88, 185, 25, 916, 198, 1304, 917, 30, 23, 878, 709, 20, 19, 713, 197, 1068, 190, 1}

# if instance_name == "dfn-bwin":
#     T = {1032,1019,1013,985,952,948,932,930,929,925,918,656,652,648,645,643,502,469,440,439,435,431,428,426,413,400,364,327,289,250,210,174,173,169,147,135,127,91,88,84,77,75,48,40,31,19,18,4,3,2,1}

# if instance_name == "dfn-gwin":
#     T = {1127,1126,1124,1121,1117,1109,1106,1099,1091,1082,1061,1049,1036,1022,1007,991,975,974,956,937,918,901,896,874,851,827,802,749,721,692,662,631,599,566,532,497,461,424,377,367,361,347,291,288,266,224,181,138,137,93,76,55,47,46,7,0}



# if instance_name == "di-yuan":
#     T = {877, 793, 667, 665, 652, 454, 447, 441, 791, 393, 287, 658, 171, 279, 35, 186, 118, 15, 431, 62, 5, 8, 49, 52, 28, 46, 54, 43, 37, 69, 348, 89, 13, 354, 10, 168, 78, 0, 166, 433, 2, 380, 281, 116, 94}

# if instance_name == "france":
#     T = {866, 773, 768, 750, 556, 499, 498, 397, 396, 361, 371, 318, 54, 337, 323, 387, 391, 675, 75, 298, 142, 544, 138, 139, 46, 374, 31, 246, 36, 52, 774, 561, 372, 37, 9, 314, 490, 15, 335, 71, 10, 63, 786, 493, 27, 355, 80, 81, 811, 2, 0}

# if instance_name == "geant":
#     T = {449,406,393,385,368,336,318,240,237,235,226,218,208,196,181,178,176,172,165,148,147,145,142,141,140,83,64,43,41,14,11,7,6}

# if instance_name == "germany50":
#     T = {2673, 2646, 2596, 2467, 2382, 2466, 2412, 2378, 2435, 2310, 2302, 2275, 216, 2270, 1306, 211, 2301, 0, 212, 2271, 43, 126, 2623, 242, 125, 2862, 90, 205, 69, 2592, 2436, 130, 39, 208, 3708, 38, 2440, 2267, 2381, 34, 2316, 207, 32, 3, 2386, 35}

# if instance_name == "giul39":
#     T = {820, 670, 583, 1045, 513, 506, 434, 968, 663, 433, 430, 426, 267, 179, 667, 266, 263, 262, 585, 270, 6, 184, 175, 1042, 91, 261, 0, 183, 176, 429, 523, 173, 14, 174, 18, 1117, 258, 819, 666, 424, 15, 514, 969, 11, 9, 4, 88, 3}





# if instance_name == "india35":
#     T = {3137, 2237, 2211, 2207, 1872, 834, 84, 1849, 1839, 1823, 1648, 1605, 0, 1447, 1419, 1418, 186, 1414, 843, 346, 1397, 855, 1298, 1359, 1357, 1367, 1336, 1326, 20, 1310, 1290, 842, 488, 732, 1818, 452, 405, 330, 397, 185, 377, 1820, 1351, 367, 236, 348, 339, 2208, 1891, 301, 338, 117, 1387, 1297, 6, 322, 2, 178, 263, 291, 1358, 57, 275, 270, 107, 67, 28, 224, 90, 115, 169, 4, 162, 161, 146, 2447, 136, 120, 254, 246, 272, 99, 83, 82, 81, 2324, 249, 29, 198, 262, 2227, 98, 195, 1307, 5, 100, 1, 1457, 852, 331, 27, 318, 12, 176}


# if instance_name == "janos-us":
#     T = {377, 313, 166, 311, 447, 275, 51, 175, 204, 170, 134, 280, 93, 129, 167, 127, 172, 379, 137, 98, 85, 125, 48, 88, 310, 52, 84, 3, 43, 89, 45, 124, 2, 12, 0, 8, 17, 9, 472, 44, 1, 90, 4, 413, 7}

# if instance_name == "janos-us-ca":
#     T = {1264, 1191, 1154, 683, 679, 584, 582, 580, 579, 319, 6, 190, 263, 247, 245, 146, 188, 568, 206, 183, 123, 317, 301, 297, 132, 130, 1, 184, 127, 71, 358, 125, 126, 87, 27, 64, 62, 89, 68, 298, 85, 2, 63, 681, 261, 4, 0, 3, 181, 148, 72, 13, 204, 122, 11}


# if instance_name == "newyork":
#     T = {771, 731, 678, 800, 260, 247, 563, 216, 203, 191, 215, 171, 250, 170, 161, 158, 145, 125, 112, 65, 3, 57, 668, 51, 1, 5, 50, 98, 20, 205, 99, 52, 146, 30, 78, 53, 10, 17, 0, 2, 68, 115, 100, 123, 4}


# if instance_name == "nobel-eu":
#     T = {590, 573, 591, 571, 524, 178, 145, 563, 24, 241, 136, 772, 104, 513, 102, 146, 83, 23, 64, 63, 59, 678, 4, 28, 44, 95, 673, 43, 25, 519, 0, 19, 177, 97, 567, 98, 1, 3, 56, 568, 514, 141, 135}




# if instance_name == "nobel-germany":
#     T = {173, 343, 169, 122, 345, 40, 15, 120, 20, 135, 109, 6, 235, 56, 124, 5, 0}


# if instance_name == "nobel-us":
#     T = {31, 104, 50, 103, 7, 8, 2, 65, 24, 3, 97}

# if instance_name == "norway":
#     T = {320, 276, 251, 248, 155, 5, 52, 183, 56, 6, 296, 0, 11, 1, 4, 55, 321, 153, 105, 103, 54, 158, 2}


# if instance_name == "pdh":
#     T = {547,546,544,543,542,541,531,508,495,481,433,415,396,376,355,333,308,261,235,208,170,159,151,141,121,71,70,58,25}

# if instance_name == "pioro40":
#     T = {3217, 3171, 1981, 1950, 1949, 1939, 1917, 1911, 1885, 1875, 1846, 1886, 1796, 1527, 1526, 1551, 1525, 1296, 1256, 1240, 594, 588, 362, 1235, 1550, 562, 538, 114, 533, 24, 511, 427, 450, 1157, 7, 421, 25, 370, 396, 395, 3177, 1852, 137, 521, 1239, 394, 372, 75, 371, 169, 163, 1290, 537, 563, 93, 81, 3211, 539, 50, 1797, 1241, 180, 49, 366, 353, 529, 16, 224, 0, 20, 26, 1090, 104, 5}




# if instance_name == "polska":
#     T = {138, 37, 6, 55, 147, 3, 4, 0}

# if instance_name == "sun":
#     T = {1119, 26, 994, 978, 956, 982, 950, 18, 931, 923, 922, 864, 25, 734, 698, 805, 264, 981, 740, 926, 771, 689, 679, 671, 669, 633, 700, 76, 596, 588, 739, 449, 66, 2, 339, 6, 284, 834, 269, 958, 674, 373, 266, 349, 953, 260, 1166, 1123, 56, 79, 670, 74, 44, 0, 274, 665, 1056, 68, 353, 82, 29, 677, 746, 272, 58, 354}

# if instance_name == "ta1":
#     T = {1090,1052,943,927,691,675,669,558,538,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,514,513,512,511,510,509,508,507,471,426,388,384,341,297,252,206,193,177,171,163,159,145,129,123,115,111,103,62,46,30,24,16,12,4,3,0}

# if instance_name == "ta2":
#     T = {5744, 5500, 5319, 5317, 5309, 5298, 5167, 5139, 5108, 4977, 4956, 4752, 4750, 4668, 4742, 4725, 4704, 4677, 4605, 3860, 3465, 3438, 2456, 2446, 420, 2441, 2414, 239, 1415, 2300, 4731, 1405, 4694, 4716, 1394, 1388, 1374, 5502, 3374, 75, 1373, 3424, 3416, 1340, 1339, 641, 4942, 2450, 288, 700, 5844, 7, 332, 688, 4950, 3385, 4975, 227, 378, 393, 687, 4685, 357, 666, 217, 1379, 697, 693, 39, 384, 702, 325, 26, 315, 3429, 2477, 313, 342, 2436, 3463, 1352, 220, 1413, 708, 92, 4683, 719, 727, 274, 61, 2253, 2149, 273, 100, 38, 5156, 4, 653, 1337, 1, 4967, 389, 66, 60, 2435, 102, 2025, 4702, 3455, 81, 379, 0, 14, 3423}

# if instance_name == "zib54":
#     T = {2749, 2584, 2135, 1566, 1561, 1541, 1505, 1503, 1136, 1130, 1114, 2150, 1563, 1103, 2133, 1156, 1102, 1134, 211, 1571, 1151, 1031, 191, 3000, 2880, 2137, 1483, 54, 16, 56, 34, 173, 71, 228, 179, 2771, 2766, 1413, 22, 2759, 213, 45, 23, 180, 1, 1352, 0}


if instance_name == "abilene":
    T = {80, 82, 108, 99, 26, 103}

if instance_name == "atlanta":
    T = {8, 3, 150, 4, 47, 103, 45, 68, 6, 10, 35, 24}

if instance_name == "cost266":
    T = {3, 135, 143, 727, 709, 1249, 1067, 875, 1046, 1045, 989, 4, 190, 208, 924, 24, 886, 196, 923, 43, 25, 1111, 725, 15, 717, 33, 32, 885, 185, 144, 195, 184, 1068, 880, 1098, 898, 30, 19, 1261, 1304, 726, 917, 936, 115, 1653, 1608, 1607, 1606, 1605, 1604, 1603, 1602, 1601, 1600, 1599, 1598, 1597, 1596, 1595, 1594, 1593, 1592, 1591, 1590, 1589, 1588, 1587, 1586, 1585, 1584, 1583, 1582, 1581, 1580, 1579, 1578, 1577, 1576, 1575, 1574, 1573, 1572}

if instance_name == "dfn-bwin":
    T = {62, 985, 12, 105, 160, 286, 4, 1034, 131, 914, 166, 922, 134, 201, 982, 998, 132, 173, 929, 91, 112, 782, 657, 47, 999, 174, 930, 531, 275, 157, 87, 54, 29, 268, 516, 28, 514, 1008, 266, 1006, 512, 1004, 152, 1002, 510, 1000, 84, 508, 263, 996, 53}

if instance_name == "dfn-gwin":
    T = {875, 1091, 934, 1099, 988, 902, 1085, 985, 245, 286, 141, 253, 53, 71, 984, 68, 283, 871, 259, 266, 567, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1109, 1098, 1097, 1096, 1095, 1094, 1093, 1092, 1110, 1090, 1089, 1088, 1087, 1086, 1111, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073}






if instance_name == "di-yuan":
    T = {658, 652, 348, 56, 2, 52, 15, 679, 441, 54, 380, 35, 431, 276, 877, 37, 433, 520, 78, 195, 463, 870, 236, 164, 281, 393, 28, 69, 511, 13, 199, 874, 193, 467, 171, 887, 5, 41, 346, 51, 370, 8, 287, 455, 859}

if instance_name == "france":
    T = {47, 2, 298, 884, 866, 371, 774, 54, 246, 285, 139, 259, 296, 921, 335, 373, 476, 773, 59, 334, 675, 375, 477, 339, 372, 81, 751, 811, 790, 337, 71, 57, 922, 982, 827, 786, 80, 63, 544, 768, 855, 850, 726, 442, 297, 138, 338, 258, 142, 262, 374}

if instance_name == "geant":
    T = {160, 602, 449, 640, 339, 317, 135, 48, 63, 218, 333, 318, 328, 74, 161, 150, 40, 2, 341, 584, 483, 296, 464, 338, 269, 395, 409, 44, 59, 324, 319, 163, 394}
    
if instance_name == "germany50":
    T = {3916, 3915, 3914, 3913, 3912, 3911, 3910, 3909, 3908, 3907, 3906, 3905, 3904, 3903, 3902, 3901, 3900, 3899, 3898, 3897, 3896, 3895, 3894, 3893, 3892, 3891, 3890, 3889, 3888, 3887, 3886, 3885, 3884, 3883, 3882, 3881, 3880, 3879, 3878}
    
if instance_name == "giul39":
    T = {3741, 3740, 3739, 3738, 3737, 3736, 3735, 3734, 3733, 3732, 3731, 3730, 3729, 3728, 3727, 3726, 3725, 3724, 3723, 3722, 3721, 3720, 3719, 3718, 3717, 3716, 3715, 3714, 3713, 3712, 3711, 3710, 3709, 3708, 3707, 3706, 3705}
    




if instance_name == "india35":
    T = {3240, 3239, 3238, 3237, 3236, 3235, 3234, 3233, 3232, 3231, 3230, 3229, 3228, 3227, 3226, 3225, 3224, 3223, 3222, 3221, 3220, 3219, 3218, 3217, 3216, 3215, 3214, 3213, 3212, 3211, 3210, 3209}
    

if instance_name == "janos-us":
    T = {2, 310, 447, 377, 313, 88, 7, 44, 127, 45, 85, 166, 3, 50, 9, 90, 4, 275, 129, 49, 476, 51, 314, 55, 93, 12, 48, 132, 278, 128, 410, 53, 312, 443, 472, 8, 89, 14, 95, 134, 280, 52, 311, 379, 58}
    

if instance_name == "janos-us-ca":
    T = {2, 60, 72, 665, 13, 26, 1259, 1190, 25, 59, 1223, 11, 614, 579, 581, 123, 27, 1294, 1154, 1227, 1229, 29, 1193, 1361, 582, 120, 618, 350, 66, 298, 68, 459, 303, 127, 183, 714, 73, 568, 615, 71, 125, 179, 63, 64, 237, 186, 128, 184, 126, 1295, 132, 681, 87, 297, 304, 358, 668, 119, 478, 580, 731, 683, 9, 1264, 315, 1331, 1156, 949, 1823, 1822, 1821, 1820, 1819, 1818, 1817, 1816, 1815, 1814, 1813, 1812, 1811, 1810, 1809, 1808, 1807, 1806, 1805, 1804, 1803, 1802, 1801, 1800, 1799, 1798}


if instance_name == "newyork":
    T = {146, 171, 10, 563, 800, 123, 3, 100, 170, 203, 205, 2, 57, 668, 206, 771, 216, 215, 161, 731, 196, 200, 1223, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165}
    

if instance_name == "nobel-eu":
    T = {64, 4, 136, 782, 772, 28, 275, 276, 241, 242, 549, 524, 595, 63, 673, 145, 3, 104, 19, 18, 97, 512, 596, 25, 744, 573, 563, 594, 597, 607, 141, 571, 580, 140, 29, 233, 794, 758, 24, 434, 821, 820, 819}
    664.089



if instance_name == "nobel-germany":
    T = {345, 319, 332, 173, 175, 103, 120, 348, 343, 15, 130, 326, 174, 281, 169, 60, 279}


if instance_name == "nobel-us":
    T = {24, 178, 106, 2, 104, 65, 28, 8, 26, 98, 27}
    

if instance_name == "norway":
    T = {155, 296, 153, 5, 183, 320, 2, 276, 1175, 490, 491, 54, 248, 321, 55, 61, 85, 86, 56, 4, 275, 251, 158, 182, 6, 11, 35, 36, 1043, 531, 95, 60, 41, 25, 180, 1302, 660, 1300, 662, 1298, 658, 1296, 338, 1294, 656, 1292, 178, 1290, 654, 1288, 336, 1286, 652, 1284, 110, 1282, 650, 1280, 334, 1278, 648, 1276, 176, 1274, 646, 1272}


if instance_name == "pdh":
    T = {168, 25, 139, 445, 143, 319, 284, 524, 295, 293, 229, 160, 132, 464, 444, 2, 58, 149, 145, 349, 353, 340, 325, 138, 342, 273, 300, 568, 567}
    

if instance_name == "pioro40":
    T = {501, 484, 488, 168, 1, 3340, 8, 21, 5, 12, 14, 20, 15, 4, 3, 4000, 19, 9, 54, 472, 1572, 584, 11, 10, 24, 3376, 404, 3870, 2017, 3976, 3975, 3974, 3973, 3972, 3971, 3970, 3969, 3968, 3967, 3966}
    



if instance_name == "polska":
    T = {6, 138, 3, 147, 110, 120, 37, 51}
    

if instance_name == "sun":
    T = {950, 978, 981, 671, 672, 588, 86, 293, 1100, 1099, 355, 864, 734, 922, 266, 76, 986, 698, 984, 985, 1157, 700, 1120, 1119, 982, 84, 1158, 85, 1175, 448, 320, 319, 1009, 923, 924, 596, 1057, 1056, 1054, 979, 633, 669, 834, 449, 339, 1010, 356, 738, 771, 663, 625, 1129, 248, 274, 363, 275, 364, 1066, 803, 1130, 1123, 953, 952, 1028, 1283, 1293}
    

if instance_name == "ta1":
    T = {1092, 3, 125, 1208, 1221, 426, 1047, 1029, 664, 767, 464, 558, 633, 665, 258, 285, 347, 746, 759, 248, 272, 663, 734, 256, 260, 26, 745, 271, 1084, 1257, 451, 136, 777, 795, 1043, 531, 275, 85, 53, 29, 1314, 1310, 1298, 338, 656, 1292, 178, 1290, 654, 1288, 336, 1286, 652, 1284, 100, 1282, 650, 1280, 334, 1278, 648, 1276, 176, 1274, 646, 1272}
    

if instance_name == "ta2":
    T = {23, 27, 5734, 920, 7, 18, 719, 9, 16, 1214, 12, 21, 13, 6, 36, 1117, 8, 20, 19, 509, 514, 17, 410, 10, 25, 5886, 5860, 5859, 5858, 5857, 5856, 5855, 5854, 5853, 5852, 5851, 5850, 5849, 5848, 5847, 5846, 5845, 5844, 5843, 5842, 5841, 5840, 5839, 5838, 5837, 5836, 5835, 5834, 5833, 5832, 5831, 5830, 5829}
    


if instance_name == "zib54":
    T = {3240, 3239, 3238, 3237, 3236, 3235, 3234, 3233, 3232, 3231, 3230, 3229, 3228, 3227, 3226, 3225, 3224, 3223, 3222, 3221, 3220, 3219, 3218, 3217, 3216, 3215, 3214, 3213, 3212, 3211, 3210, 3209}

# n_sim = 100 
Q_y = pd.read_csv("./results-learning/" + instance_name + "-sampled.csv", header=None, sep=" ").iloc[:100, :-1] 

n_scenario = Q_y.shape[1] 
samples = set(range(n_scenario))
p = int(percentage_T*n_scenario) # num of T 
# data = Q_y.T 
# kmedoids = KMedoids(n_clusters=p, random_state=5200)
# kmedoids.fit(data)
# T = set(kmedoids.medoid_indices_)


print(f"{instance_name}:") 
print(T)



def O_p_median(T, samples):  
    result = 0.0 
    notT = samples - T 
    for n in notT:
        min_m = -1
        min_dist = float('inf')  
        for m in T: 
            if np.linalg.norm(Q_y.iloc[:,n] - Q_y.iloc[:,m]) < min_dist:
                min_m = m 
                min_dist = np.linalg.norm(Q_y.iloc[:,n] - Q_y.iloc[:,m])
        result = max(result, (Q_y.iloc[:,n] - Q_y.iloc[:,min_m]).abs().mean()) 
    return result 



# last_O_p_median = 2*O_p_median(T, samples) 
for n_idx in range(n_iterations):
    cur_O_p_median = O_p_median(T, samples)
    print(f"iteration: {n_idx}")
    print(f"    current T: {T}")
    print(f"    current O_p_median: {cur_O_p_median}")
    # if (last_O_p_median-cur_O_p_median) / last_O_p_median < 0.0001:
    #     break 
    # last_O_p_median = cur_O_p_median
    for _ in range(n_swap):
        m = random.choice(list(T))
        n = random.choice(list(samples - T))
        T_prime = T.copy() 
        T_prime.remove(m)
        T_prime.add(n) 
        if O_p_median(T_prime, samples) < cur_O_p_median:
            T = T_prime    


with open("./output-learning/" + instance_name + "-outputsamples.txt", "w") as f:
    f.write(" ".join(str(x) for x in T))
    f.write("\n")
    for m in T:
        f.write(f"{m} {m}\n")
    for n in samples - T:
        min_m = -1
        min_dist = float('inf')  
        for m in T: 
            if np.linalg.norm(Q_y.iloc[:,n] - Q_y.iloc[:,m]) < min_dist:
                min_m = m 
                min_dist = np.linalg.norm(Q_y.iloc[:,n] - Q_y.iloc[:,m])
        f.write(f"{n} {min_m}\n") 









end_time = time.time()  # 记录结束时间
elapsed_time = end_time - start_time  # 计算耗时（秒）
print(f"{instance_name}-耗时: {elapsed_time:.4f} 秒")